import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:kiwi_admin/Main/Home/HomeScreens.dart';
import 'package:kiwi_admin/Main/LayoutMain.dart';
import 'package:local_auth/local_auth.dart';

class ProfileController extends GetxController {
  static ProfileController get instance => Get.find();
  var isBiometricEnabled = false.obs;
  final box = GetStorage();
  Future<void> loadBiometricSetting() async {
    isBiometricEnabled.value = box.hasData('biometric_enabled');
  }

  Future<void> toggleBiometric(bool value) async {
    if (value) {
      bool authenticated = await authenticateWithBiometric();
      if (authenticated) {
        isBiometricEnabled.value = true;
        box.write('biometric_enabled', true);
        Get.snackbar("Th√†nh c√¥ng", "ƒê√£ b·∫≠t ƒëƒÉng nh·∫≠p b·∫±ng v√¢n tay");
      } else {
        Get.snackbar("L·ªói", "X√°c th·ª±c v√¢n tay th·∫•t b·∫°i");
      }
    } else {
      isBiometricEnabled.value = false;
      box.write('biometric_enabled', false);
    }
  }

  void logout() {
    final box = GetStorage();
    box.remove('auth_token');
    Future.delayed(Duration.zero, () {
      if (Get.context != null) {
        Get.offAll(() => LayoutMainScreens()); // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh login
      }
    });
  }

  final LocalAuthentication _localAuth = LocalAuthentication();
  Future<bool> authenticateWithBiometric() async {
    try {
      // üîç Ki·ªÉm tra xem thi·∫øt b·ªã c√≥ h·ªó tr·ª£ sinh tr·∫Øc h·ªçc kh√¥ng
      bool canCheckBiometrics = await _localAuth.canCheckBiometrics;
      bool isDeviceSupported = await _localAuth.isDeviceSupported();

      if (!isDeviceSupported || !canCheckBiometrics) {
        Get.snackbar("L·ªói", "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ v√¢n tay/Face ID!",
            snackPosition: SnackPosition.BOTTOM);
        return false;
      }

      // üîê Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c th·ª±c v√¢n tay
      bool authenticated = await _localAuth.authenticate(
        localizedReason: "X√°c th·ª±c b·∫±ng v√¢n tay ho·∫∑c Face ID ƒë·ªÉ ti·∫øp t·ª•c",
        options: AuthenticationOptions(
          biometricOnly: true, // Ch·ªâ d√πng sinh tr·∫Øc h·ªçc
          stickyAuth: true, // Gi·ªØ tr·∫°ng th√°i x√°c th·ª±c
          useErrorDialogs: true, // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥
        ),
      );

      return authenticated; // ‚úÖ Tr·∫£ v·ªÅ k·∫øt qu·∫£ x√°c th·ª±c
    } catch (e) {
      Get.snackbar("L·ªói", "C√≥ l·ªói khi x√°c th·ª±c: $e",
          snackPosition: SnackPosition.BOTTOM);
      return false;
    }
  }
}
